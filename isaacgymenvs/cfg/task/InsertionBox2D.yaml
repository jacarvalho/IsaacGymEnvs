# used to create the object
name: InsertionBox2D

physics_engine: ${..physics_engine}

# If given, will override the device setting in gym.
env:
  numEnvs: ${resolve_default:100,${...num_envs}}
  envSpacing: 1.5

  controlFrequencyInv: 3  # (1/(dt))/3 = 60/3 = 20Hz
  recomputePrePhysicsStep: True

  asset:
    assetRoot: "../../assets"
    assetFileNameHole: "urdf/Box2D/box2D.urdf"
    assetFileNamePeg: "urdf/Box2D/peg.urdf"

  maxEpisodeLength: 1000

  initialPositionBounds: [[0.4, -0.5], [0.6, 0.5]]  # If set, initial positions will be sampled between [min, max], otherwise everywhere
  useInitialStates: False  # If true, the initial states will be sampled from a list
  enableSparseReward: True  # If true, the reward will always be -1. Otherwise, the reward is a distance to the goal

  linear_velocity_norm_min: 0.
  linear_velocity_norm_max: 0.05
  angular_velocity_norm_min: 0.
  angular_velocity_norm_max: 0.5
#  clipObservations: 1.0
#  clipActions: 10.0

  enableVelocityState: False  # If true, uses linear and angular velocities in the state, along with the position
  enableOrientations: True  # If true, includes the orientations as part of the state and controller

  # Low-level controller parameters
  enableNonimalPolicy: True  # If true, uses a PD controller to the goal as nominal policy.
  useOSC: True  # If true, uses the Operational Space Control (OSC) controller. Otherwise, uses differential IK
  controlVelocity: False  # If false, IC controls the position. If true, control directly the velocity u = K*(dx_des - dx) - D*ddx. If enabled, the controlFrequencyInv should be small
  learnOrientations: False  # If false, the desired orientation is fixed. If true, is learned by the policy
  learnStiffness: False
  learnDamping: False

  enableDebugVis: True

  enableCameraSensors: False  # set to True if you use camera sensors in the environment

sim:
  dt: 0.0166 # 1/60 s
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, 0.0]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 1
    contact_offset: 0.005
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 1048576 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)


task:
  randomize: False