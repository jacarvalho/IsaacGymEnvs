# used to create the object
name: InsertionPegHoleBox3D

physics_engine: ${..physics_engine}

# If given, will override the device setting in gym.
env:
  numEnvs: ${resolve_default:100,${...num_envs}}
  envSpacing: 1.5

  controlFrequencyInv: 4  # (1/(dt))/4 = 60/4 = 15Hz
  recomputePrePhysicsStep: True

  asset:
    assetRoot: "../../assets"
    assetFileNameHole: "urdf/Box3D/box3D.urdf"
    assetFileNamePeg: "urdf/Box3D/peg.urdf"

  n_taskpace_pos: 3  # 3 prismatic joints
  n_taskpace_rot: 3  # 3 revolute joints

  maxEpisodeLength: 30

  initialPositionBounds: [[-0.5, -0.5, 0.3], [0.5, 0.5, 0.6]]  # If set, initial positions will be sampled between [min, max], otherwise everywhere
  initialRotationBounds: [[-0.79, -0.79, -0.79], [0.79, 0.79, 0.79]]  # If set, initial orientations will be sampled between [min, max], otherwise everywhere
  useInitialStates: False  # If true, the initial states will be sampled from a list
  enableSparseReward: False  # If true, the reward will always be -1. Otherwise, the reward is a distance to the goal
  #  clipObservations: 1.0
  #  clipActions: 10.0

  # mininum and maximum deltas for the cartesian controller
  delta_translation_min: -0.15
  delta_translation_max: 0.15
  delta_rotation_max: 0.3

  linear_velocity_min: -0.01
  linear_velocity_max: 0.01
  angular_velocity_min: -0.05
  angular_velocity_max: 0.05


  # Low-level controller parameters
  enableNonimalPolicy: True  # If true, uses a PD controller to the goal as nominal policy.
  controlType: "osc"  # osc - Operational Space Control (OSC) controller. ik - differentiable IK
  controlVelocity: False  # If false, IC controls the position. If true, control directly the velocity u = D*(dx_des - dx). If enabled, the controlFrequencyInv should be small
  learnRotations: False  # If false, the desired orientation is fixed. If true, is learned by the policy
  learnStiffness: False  # If true, the stiffness K_pos and K_orn is learned by the policy
  justLearnStiffness: True  # If true, only the stiffness K_pos and K_orn is learned by the policy and not the delta position/orientation

  enableDebugVis: True

  enableCameraSensors: False  # set to True if you use camera sensors in the environment

sim:
  dt: 0.0166 # 1/60 s
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, 0.0]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 8
    num_velocity_iterations: 1
    contact_offset: 0.005
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 1048576 # 1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 0 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)


task:
  randomize: False